#include<stdio.h>
#include<stdlib.h>

void create();
void display();
void insert_beg();
void insert_pos();
void delete_end();

struct node
{
    int info;
    struct node *next;
};

struct node *start = NULL;
int main()
{
    int choice;
    while(1)
    {
        printf("\t\t********MENU********\n");
        printf("\t\t 1. To create LL \n");
        printf("\t\t 2. Display LL \n");
        printf("\t\t 3. Insert at beginning \n");
        printf("\t\t 4. Insert at position \n");
        printf("\t\t 5. Delete at end \n");
        printf("\t\t 6. Exit \n");
        printf("\n----------------\n");
        printf("Enter your choice: \n");
        scanf("%d", &choice);
        switch(choice)
        {
        case 1:
            create();
            break;
        case 2:
            display();
            break;
        case 3:
            insert_beg();
            break;
        case 4:
            insert_pos();
            break;
        case 5:
            delete_end();
            break;
        case 6:
            exit(0);
            break;
        default:
            printf("\n Wrong Choice... \n");
            break;
        }
    } return 0;
}

void create()
{
    struct node *temp, *ptr;
    temp = (struct node *)malloc(sizeof(struct node));
    if (temp == 0)
    {
        printf("\n out of memory space \n ");
        exit(0);
    }
    printf("\n enter the data value for the node : \t");
    scanf("%d", &temp -> info);
    temp -> next = NULL;
    if (start == NULL)
    {
        start = NULL;
    }
    else
    {
        ptr = start;
        while(ptr->next!=NULL)
        {
            ptr = ptr -> next;
        }
        ptr -> next = temp;
    }
}

void display()
{
    struct node *ptr;
    if(start == NULL)
    {
        printf("\n List is empty \n");
        return;
    }
    else
    {
        ptr = start;
        printf("\n list elements are : \n");
        while(ptr != NULL)
        {
            printf("%d\t", ptr -> info);
            ptr = ptr -> next;
        }
    }
}
void insert_beg()
{
    struct node *temp;
    temp = (struct node *)malloc(sizeof(struct node));
    if(temp == NULL)
    {
        printf("\n Out of memory space \n");
        return;
    }
    printf("\n Enter the data value for the node: \t");
    scanf("%d", &temp -> info);
    temp ->next = NULL;
    if (start == NULL)
    {
        start = temp;
    }
    else
    {
        temp -> next = start;
        start = temp;
    }
}

void insert_pos()
{
    struct node *ptr, *temp;
    int i, pos;
    temp = (struct node *) malloc(sizeof(struct node));
    if(temp == NULL)
    {
        printf("\n out of memory space \n");
        return;
    }
    printf("Enter new position for the node to be inserted: \n");
    scanf("%d", &pos);
    printf("enter the data value for the node: \n");
    scanf("%d", &temp->info);

    temp ->next = NULL;
    if(pos == 0)
    {
        temp -> next = start;
        start = temp;
    }
    else
    {
        for(i = 0, ptr = start;i<pos-1;i++)
        {
            ptr = ptr -> next;
            if (ptr == NULL)
            {
                printf("Position not found...\n");
                return;
            }
        }
        temp ->next = ptr ->next;
        ptr ->next = temp;
    }
}

void delete_end()
{
    struct node *temp, *ptr;
    if (start == NULL)
    {
        printf("\n List is empty...\n");
        return;
    }
    else if(start -> next == NULL)
    {
        ptr = start;
        start = NULL;
        printf("\n The element to be deleted: %d\t \n",ptr ->info);
        free(ptr);
    }
    else
    {
        ptr = start;
        while(ptr ->next != NULL)
        {
            temp = ptr;
            ptr = ptr -> next;
        }
        temp -> next = NULL;
        printf("the deleted element is : %d\t", ptr ->info);
        free(ptr);
    }
}
