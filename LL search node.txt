#include<stdio.h>
#include<stdlib.h>

struct node
{
    int data;
    struct node *next;
} *head;

void create_list(int n);
void display_list();
int search(int key);

int main()
{
    int n, key_to_search, index;
    printf("Enter number of nodes to create: ");
    scanf("%d", &n);

    create_list(n);

    printf("\n Data in list: \n");
    display_list();

    printf("\nEnter element to search: ");
    scanf("%d", &key_to_search);

    index = search(key_to_search);

    if (index >= 0)
    {
        printf("%d found in the list at position %d\n", key_to_search, index);
    }
    else
    {
        printf("%d not found in the list\n", key_to_search);
    }
    return 0;
}

void create_list(int n)
{
    struct node *newNode, *temp;
    int data, i;

    head = malloc(sizeof(struct node));

    if (head == NULL)
    {
        printf("Unable to allocate memory.");
        exit(0);
    }
    printf("Enter data of node 1: ");
    scanf("%d", &data);

    head -> data = data;
    head -> next = NULL;

    temp = head;

    for (i = 2; i <= n; i++)
    {
        newNode = malloc(sizeof(struct node));

        if (newNode == NULL)
        {
            printf("Unable to allocate memory.");
            exit(0);
        }

        printf("Enter data of node %d: ", i);
        scanf("%d", &data);

        newNode->data = data;
        newNode->next = NULL;

        temp->next = newNode;
        temp = temp->next;
    }
}

void display_list()
{
    struct node *temp;

    if (head == NULL)
    {
        printf("List is empty.\n");
        return;
    }

    temp = head;
    while (temp != NULL)
    {
        printf("%d, ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int search(int key)
{
    int index;
    struct node *curNode;

    index = 0;
    curNode = head;

    while(curNode != NULL && curNode->data != key)
    {
        index++;
        curNode = curNode->next;
    }
    return (curNode != NULL) ? index : -1;
}
